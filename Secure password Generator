import secrets
import string

def generate_secure_password(length, use_uppercase=True, use_numbers=True, use_symbols=True):
    # Define the character sets
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase if use_uppercase else ''
    numbers = string.digits if use_numbers else ''
    symbols = string.punctuation if use_symbols else ''
    
    # Combine all chosen character sets
    all_characters = lowercase + uppercase + numbers + symbols
    
    if not all_characters:
        raise ValueError("At least one character set must be selected.")
    
    # Generate a secure password using the secrets module
    password = ''.join(secrets.choice(all_characters) for _ in range(length))
    
    return password

def main():
    print("Welcome to the Secure Password Generator!")
    
    # Get password length from the user
    try:
        length = int(input("Enter the password length: "))
        if length < 1:
            print("Password length must be at least 1.")
            return
    except ValueError:
        print("Please enter a valid number.")
        return
    
    # Options for password generation
    use_uppercase = input("Include uppercase letters? (y/n): ").lower() == 'y'
    use_numbers = input("Include numbers? (y/n): ").lower() == 'y'
    use_symbols = input("Include symbols? (y/n): ").lower() == 'y'
    
    # Generate and display the secure password
    try:
        password = generate_secure_password(length, use_uppercase, use_numbers, use_symbols)
        print(f"\nYour securely generated password is: {password}")
    except ValueError as e:
        print(e)

# Run the secure password generator
main()
